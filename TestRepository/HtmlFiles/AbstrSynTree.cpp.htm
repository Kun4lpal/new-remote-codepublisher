<!DOCTYPE html>
<html>
  <head>
  <script src="../Scripts/Script.js"></script>
  <link rel="stylesheet" href="../Scripts/CSS-sheet.css"></link>
  </head>
  <body>
  <h3>
  Dependencies!

  </h3>
  <h4>
  <a class="indent" href="AbstrSynTree.h.htm">
  1- AbstrSynTree.h

  </a>
  </h4>
  <h4>
  <a class="indent" href="Logger.cpp.htm">
  2- Logger.cpp

  </a>
  </h4>
  <pre>
  /////////////////////////////////////////////////////////////////////
  //  AbstrSynTree.cpp - Represents an Abstract Syntax Tree          //
  //  ver 1.3                                                        //
  //  Language:      Visual C++ 2015                                 //
  //  Platform:      Dell XPS 8900, Windows 10                       //
  //  Application:   Used to support parsing source code             //
  //  Author:        Jim Fawcett, CST 4-187, Syracuse University     //
  //                 (315) 443-3948, jfawcett@twcny.rr.com           //
  /////////////////////////////////////////////////////////////////////
  
  #include "AbstrSynTree.h"
  #include "../Utilities/Utilities.h"
  
  using namespace CodeAnalysis;
  
  //----&lt; default initialization for ASTNodes &gt;------------------------
  
  ASTNode::ASTNode() 
    : type_("anonymous"), name_("none"), startLineCount_(0), endLineCount_(0), complexity_(0) {}
  
  //----&lt; initialization accepting type and name &gt;---------------------
  
  ASTNode::ASTNode(const Type& type, const Name& name) 
    : type_(type), name_(name), startLineCount_(0), endLineCount_(0), complexity_(0) {}
  
  //----&lt; destructor deletes children, statements, declarations &gt;------
  
  ASTNode::~ASTNode()
  {
    for (auto pNode : children_)
      delete pNode;
    for (auto pNode : statements_)
      delete pNode;
    for (auto node : decl_)
    {
      delete node.pTc;
    }
  }
  //----&lt; returns string with ASTNode description &gt;--------------------
  
  std::string ASTNode::show(bool details)
  {
    std::ostringstream temp;
    temp &lt;&lt; "(";
    temp &lt;&lt; type_ &lt;&lt; ", ";
    if(name_ != "none")
      temp &lt;&lt; name_ &lt;&lt; ", ";
    if(type_ == "namespace" || type_ == "class" || type_ == "interface" || type_ == "struct" || type_ == "function")
      temp &lt;&lt; package_ &lt;&lt; ", ";
    if (details)
    {
      temp &lt;&lt; "num children: " &lt;&lt; children_.size() &lt;&lt; ", ";
      temp &lt;&lt; "num statements: " &lt;&lt; statements_.size() &lt;&lt; ", ";
    }
    temp &lt;&lt; "line: " &lt;&lt; startLineCount_ &lt;&lt; ", ";
    temp &lt;&lt; "size: " &lt;&lt; endLineCount_ - startLineCount_ + 1 &lt;&lt; ", ";
    temp &lt;&lt; "cplx: " &lt;&lt; complexity_;
    //temp &lt;&lt; "path: " &lt;&lt; path_;
    temp &lt;&lt; ")";
    return temp.str();
  }
  //----&lt; create instance and initialize first element &gt;---------------
  /*
  *  - Every AST holds an ASTNode representing the global namespace
  *  - Its children will be namespaces, classes, and global data
  */
  AbstrSynTree::AbstrSynTree(ScopeStack&lt;ASTNode*&gt;& stack) : stack_(stack)
  {
    pGlobalNamespace_ = new ASTNode("namespace", "Global Namespace");
    pGlobalNamespace_-&gt;startLineCount_ = 1;
    pGlobalNamespace_-&gt;endLineCount_ = 1;
    stack_.push(pGlobalNamespace_);
  }
  //----&lt; destroy instance and all it's ASTNodes &gt;---------------------
  /*
  *  AST destructor only has to delete its root.  The root will then
  *  delete its children, causing the children to delete their children,
  *  yada, yada, yada
  */
  AbstrSynTree::~AbstrSynTree()
  {
    delete pGlobalNamespace_;
  }
  //----&lt; return or accept pointer to global namespace &gt;---------------
  
  ASTNode*& AbstrSynTree::root()
  {
    return pGlobalNamespace_;
  }
  //----&lt; return AST typemap &gt;-----------------------------------------
  /*
  *  Type map holds ClassName keys linked to each class's ASTNode
  */
  AbstrSynTree::TypeMap& AbstrSynTree::typeMap()
  {
    return typeMap_;
  }
  //----&lt; add ASTNode ptr to stack top element's children and push &gt;---
  /*
   * - Add new scope to ScopeStack after linking to its parent scope
   * - If type is a class or struct, add to typeMap
   */
  void AbstrSynTree::add(ASTNode* pNode)
  {
    stack_.top()-&gt;children_.push_back(pNode);  // add as child of stack top
    stack_.push(pNode);                        // push onto stack
    if (pNode-&gt;type_ == "class" || pNode-&gt;type_ == "struct" || pNode-&gt;type_ == "interface")
      typeMap_[pNode-&gt;name_] = pNode;
  }
  //----&lt; pop stack's top element &gt;------------------------------------
  /*
   *  - called at end of scope
   *  - pop'd ASTNode is still linked to AST
   */
  ASTNode* AbstrSynTree::pop()
  {
    return stack_.pop();
  }
  //----&lt; find a type node using typeMap &gt;-----------------------------
  /*
  *  Retrieve ASTNode of class if it exists
  */
  ASTNode* AbstrSynTree::find(const ClassName& className)
  {
    auto iter = typeMap_.find(className);
    if (iter != typeMap_.end())
    {
      return iter-&gt;second;
    }
    return nullptr;
  }
  
  //----&lt; Test Stub &gt;--------------------------------------------------
  /*
  *  Demonstrates that AbstrSynTree can build a simple Abstract
  *  Syntax Tree and display its contents.
  */
  #ifdef TEST_ABSTRSYNTREE
  
  #include &lt;functional&gt;
  #include &lt;iostream&gt;
  
  using Utils = Utilities::StringHelper;
  
  int main()
  {
    Utils::Title("Testing AbstrSynTree and ASTNode");
  
    ScopeStack&lt;ASTNode*&gt; stack;
    AbstrSynTree ast(stack);
    ASTNode* pX = new ASTNode("class", "X");
    ast.add(pX);                                        // add X scope
    ASTNode* pf1 = new ASTNode("function", "f1");
    ast.add(pf1);                                       // add f1 scope
    ASTNode* pc1 = new ASTNode("control", "if");
    ast.add(pc1);                                       // add c1 scope
    ast.pop();                                          // end c1 scope
    ast.pop();                                          // end f1 scope
    ASTNode* pf2 = new ASTNode("function", "f2");
    ast.add(pf2);                                       // add f2 scope
    ast.pop();                                          // end f2 scope
    ast.pop();                                          // end X scope
  
    std::function&lt;void(ASTNode*, size_t)&gt; co = [](ASTNode* pNode, size_t indentLevel) 
    {
      std::cout &lt;&lt; "\n  " &lt;&lt; std::string(2 * indentLevel, ' ') &lt;&lt; pNode-&gt;show();
    };
  
    ASTWalk(ast.root(), co);
    std::cout &lt;&lt; "\n";
  
    Utils::title("testing AbstrSynTree::find");
  
    ASTNode* pFind = ast.find("X");
    if (pFind != nullptr)
      std::cout &lt;&lt; "\n  " &lt;&lt; pFind-&gt;show();
    else
      std::cout &lt;&lt; "\n  could not find ASTNode for class X";
  
    std::cout &lt;&lt; "\n\n";
  }
  
  #endif

  </pre>
  </body>
</html>