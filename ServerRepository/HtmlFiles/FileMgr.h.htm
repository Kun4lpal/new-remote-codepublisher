<!DOCTYPE html>
<html>
  <head>
  <script src="../Scripts/Script.js"></script>
  <link rel="stylesheet" href="../Scripts/CSS-sheet.css"></link>
  </head>
  <body>
  <h3>
  Dependencies!

  </h3>
  <h4>
  <a class="indent" href="IFileMgr.h.htm">
  1- IFileMgr.h

  </a>
  </h4>
  <h4>
  <a class="indent" href="FileMgr.cpp.htm">
  2- FileMgr.cpp

  </a>
  </h4>
  <h4>
  <a class="indent" href="AbstrSynTree.cpp.htm">
  3- AbstrSynTree.cpp

  </a>
  </h4>
  <pre>
  #ifndef FILEMGR_H
  #define FILEMGR_H
  /////////////////////////////////////////////////////////////////////
  // FileMgr.h - find files matching specified patterns              //
  //             on a specified path                                 //
  // ver 2.2                                                         //
  // Jim Fawcett, CSE687 - Object Oriented Design, Spring 2016       //
  /////////////////////////////////////////////////////////////////////
  /*
  * Package Operations:
  * -------------------
  * This package provides a class, FileMgr, and object factory function,
  * Create().  It's mission is to search the directory tree, rooted at
  * a specified path, looking for files that match a set of specified
  * patterns.
  *
  * It provides virtual functions file(...), dir(...), and done(), which
  * an application can override to provide application specific processing
  * for the events: file found, directory found, and finished processing.
  *
  * The package also provides interface hooks that serve the same purpose
  * but allow multiple receivers for those events.
  *
  * Required Files:
  * ---------------
  *   FileMgr.h, FileMgr.cpp, IFileMgr.h, 
  *   FileSystem.h, FileSystem.cpp
  *
  * Build Process:
  * --------------
  *   devenv FileMgr.sln /rebuild debug
  *
  * Maintenance History:
  * --------------------
  * ver 2.2 : 28 Aug 2016
  * - added more prologue comments
  * ver 2.1 : 31 Jul 2016
  * - added virtual file, dir, and done functions
  * - this lets application override instead of registering for event
  * ver 2.0 : 12 Mar 2016
  * - fixes bug in directory recursion in find(path)
  * - reduces scope of for loop in find for efficiency
  * ver 1.0 : 11 Mar 2016
  * - first release
  */
  
  #include "IFileMgr.h"
  #include "../FileSystem/FileSystem.h"
  
  namespace FileManager
  {
    class FileMgr : public IFileMgr
    {<button onclick="myFunc('class FileMgr22')" class="w3 - btn w3 - hover - black w3 - dark - grey" style="box - shadow:none">CLICK</button><div id="class FileMgr22" >
    public:
      using patterns = std::vector&lt;std::string&gt;;
      using File = std::string;
      using Dir = std::string;
      using fileSubscribers = std::vector&lt;IFileEventHandler*&gt;;
      using dirSubscribers = std::vector&lt;IDirEventHandler*&gt;;
      using doneSubscribers = std::vector&lt;IDoneEventHandler*&gt;;
  
      virtual ~FileMgr() {}
  
      //----&lt; set default file pattern &gt;-------------------------------
  
      FileMgr(const std::string& path) : path_(path)
      {
        patterns_.push_back("*.*");
        pInstance_ = this;
      }
      //----&lt; return instance of FileMgr &gt;-----------------------------
  
      static IFileMgr* getInstance()
      {
        return pInstance_;
      }
      //----&lt; add file pattern, removing default on first call &gt;-------
  
      void addPattern(const std::string& patt)
      {
        if (patterns_.size() == 1 && patterns_[0] == "*.*")
          patterns_.pop_back();
        patterns_.push_back(patt);
      }
      //----&lt; applications can overload this or reg for fileEvt &gt;------
  
      virtual void file(const File& f)
      {
        ++numFilesProcessed;
        for (auto pEvtHandler : fileSubscribers_)
        {
          pEvtHandler-&gt;execute(f);
        }
      }
      //----&lt; applications can overload this or reg for dirEvt &gt;-------
  
      virtual void dir(const Dir& fpath)
      {
        for (auto pEvtHandler : dirSubscribers_)
        {
          pEvtHandler-&gt;execute(fpath);
        }
      }
      //----&lt; applications can overload this or reg for doneEvt &gt;------
  
      virtual void done()
      {
        for (auto pEvtHandler : doneSubscribers_)
        {
          pEvtHandler-&gt;execute(numFilesProcessed);
        }
      }
      //----&lt; start search on previously specified path &gt;--------------
  
      void search()
      {
        find(path_);
        done();
      }
      //----&lt; search current path including subdirectories &gt;-----------
  
      void find(const std::string& path)
      {
        std::string fpath = FileSystem::Path::getFullFileSpec(path);
        dir(fpath);
        for (auto patt : patterns_)
        {
          std::vector&lt;std::string&gt; files = FileSystem::Directory::getFiles(fpath, patt);
          for (auto f : files)
          {
            file(f);
          }
        }
        std::vector&lt;std::string&gt; dirs = FileSystem::Directory::getDirectories(fpath);
        for (auto d : dirs)
        {
          if (d == "." || d == "..")
            continue;
          std::string dpath = fpath + "\\" + d;
          find(dpath);
        }
      }
      //----&lt; applications use this to register for notification &gt;-----
  
      void regForFiles(IFileEventHandler* pHandler)
      {
        fileSubscribers_.push_back(pHandler);
      }
      //----&lt; applications use this to register for notification &gt;-----
  
      void regForDirs(IDirEventHandler* pHandler)
      {
        dirSubscribers_.push_back(pHandler);
      }
      //----&lt; applications use this to register for notification &gt;-----
  
      void regForDone(IDoneEventHandler* pHandler)
      {
        doneSubscribers_.push_back(pHandler);
      }
    private:
      std::string path_;
      patterns patterns_;
      size_t numFilesProcessed = 0;
      fileSubscribers fileSubscribers_;
      dirSubscribers dirSubscribers_;
      doneSubscribers doneSubscribers_;
      static IFileMgr* pInstance_;
    </div>};
  
    inline IFileMgr* FileMgrFactory::create(const std::string& path)
    {
      return new FileMgr(path);
    }
  }
  #endif

  </pre>
  </body>
</html>